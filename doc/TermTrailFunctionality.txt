func: users can enter answers to self created questions. They could either be: multiple choice; essay type answers (requires matching sentences and checking for similarities)
func: can export termtrails to other users.
func: can import termtrails to own account.
func: users can make their account public or private: on public you'll show up on search results and your account can be found by searching your username. For private, you can only be found if you give another user a password that they can use to access your account.
func: provide feedback on how ready the user is for exam; have two modes: note-taking, and exam mode.
func: provide randomiser during exam mode, so the user can view and answer a different sequence of questions.
func: Red (no clue), Orange (idea, but nothing concrete), Yellow (know a bit of the correct answer), Light Green (know the answer, but not perfect), Dark Green (perfect answer), Black (may not need to know, but keeping just in case).
func: allow users to upload their files, and annotate it with their termtrail. Clicking on a term trail should show the user the part of the file connected to that trail.
func: allow users to click buttons on the keyboard so as to allow quick selection of colours.
func: full screen mode, where each term takes up a full screen. This prevents the user from seeing the other terms on the trail that could help them answer their questions.
func: provide timer that can be used to keep track of time spent thinking about answer to term.
func: be able to create multiple branches on the same repository
func: leave comments next to terms; could be answers or criticisms
func: can sell your termtrail. could even motivate students to use.
func: add 10% to the selling price of any termtrail. which gets collected by termtrail.
func: take Â£1 from users a year after they use them. give them warnings so they're not caught unaware.
func: tt should backup the users information on a daily basis until it becomes infeasible due to data load.
func: if buyer wants to sell a copy, then 30% of the selling price is added to the final selling price (+ commission). 30% goes to previous owners.
func: buyer can't share a copy for free, unless selling price for origin trail is 0; must sell for atleast same price as origin trail.
func: ask the user to enter a trail title for trail copy; same for a new trail being created.
func: trail preview access grants user rights to view your trail for specified period of time; useful to give them taster of trail before they get to buy it.
func: trail session access grants another user the right to have a session on your trail.
func: users can have full or partial access to a course. full access means they can see all trails in a course. part access means they can only see some trails in the course.

func: software to create timetable automatically or manually.
tip: as you revise, try to tie the points you locate in your notes with the terms on the trail
func: automatically create termtrail from user documents
func: users can collaborate in making termtrails
func: provide a hints and tips section
tip: try to enter terms in the form of questions or commands.
tip: when in exam mode, alternate between the 1st and last lectures as starting points for each run. Human brain tends to get more familiar with the start than end; this evens out the familiarity levels.
tip: use past papers to get a feel for what kind of questions the teacher likes to ask.
tip: listen attentively to the teacher during classes. Do they go to a great mile to talk about the details? There is a good chance they would obsess about details while marking exam answers.
func: explain the disadvantages of using this system: if you don't ever add something to your termtrail, you could end up not knowing it even exists. so be careful to add in as much information as possible.
tip: there is no limit to what you're brain can store; the only question is, do you feel like working hard?
tip: this is not a one size fits all approach. This is just for you to use to check your understanding of the concepts explained in your course.
con: you may ask yourself lots of questions that may never come out in the exam.
func: mnemonic generator; construct easy to remember mnemonics from acronyms that can aid the students in remembering long lists. Allow them to add it unto their termtrail. Terms that have mnemonics should be highlighted to the user.
func: acronym generator; rearrange the letters of an acronym provided for by users.
tip: when colouring terms, be honest with yourself. If you give a colour green to a term, only to find out later that you didn't really know it that well, it could cause problems.
tip: when working through the termtrail after the first time, if you can't properly remember how to answer a green term, then don't hesitate to change the colour of the term to a less favourable one.
tip: if you can't remember the answer to a term in more than a minute, then you have to colour it, and move on to another.
func: A buyer of a trail can't resell to another buyer. The trail is also unsharable, so no collaboration. However, your own changes could be made to it.
func: allow users to assign a weight to each question. So they can recieve a more accurate mark when they have finished their trailing session.
func: a right click can bring up a menu that enables the user to add new terms, new chapters, new trails
func: prevent someone's termtrail from being crawled by another user
func: revert to previous versions of a trail
func: allow users to enter their grades so they and other users can view their progress.
func: users can add images to their trails

TrailProposals
func: allow users to place proposals requesting trails to be made for their course material.
func: this would require the users to be able to message each other
func: users will have to make known what categories their course is, needed to calculate the ratings for each trailmaker.
func: trailmakers (tm) can view a list of all proposals...can sort by category and price.
func: multiple tm can register interest in proposal; the tm's will be sorted according to price, rating, and price density (price/rating).
func: buyers can add specific tm's they would like to view their proposals (invites). The invited tm's can then state their price.

TrailMaking
func: users can pay others to make trails for them
func: users can view the trail and work on the trail as it's being made. They communicate with the trail maker through out the entire process. This is to ensure buyer satisfaction.
func: TT keeps hold of all cash while the project is ongoing.
cond: TT Only releases cash after the buyer has received and is satisfied with the trail i.e. no disputes. In the event of a dispute, TT would have to investigate.
func: the tm retains ownership of the trail. therefore the tm recieves money for any sales made on that trail. TT still gets 10%.

RATING
func: create a rating system that's based on the quality/traits of the user. e.g. if there are 10 traits a tm should have, the tm would get rated by their customer on each trait. If the tm recieve full score on each trait, then the tm gets a 10 star rating.


you need an advice guide, module tracker, TSR, 

func: ultimately TermTrail should implement a distributed cloud storage system; could work with storj.io.